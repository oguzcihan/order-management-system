package org.cihan.ordermanagementsystem.order.controller;

import org.cihan.ordermanagementsystem.common.utils.PaginationUtil;
import org.cihan.ordermanagementsystem.order.domain.OrderFilter;
import org.cihan.ordermanagementsystem.order.domain.OrderRequest;
import org.cihan.ordermanagementsystem.order.domain.OrderResponse;
import org.cihan.ordermanagementsystem.order.service.OrderService;
import org.springdoc.core.annotations.ParameterObject;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/v1/orders")
public class OrderControllerImpl implements OrderController {

    private final OrderService orderService;

    public OrderControllerImpl(OrderService orderService) {
        this.orderService = orderService;
    }


    @Override
    public ResponseEntity<OrderResponse> createOrder(@RequestBody OrderRequest orderRequest) throws URISyntaxException {
        OrderResponse result = orderService.createOrder(orderRequest);
        return ResponseEntity.created(new URI("/api/v1/orders/" + result.id())).body(result);
    }

    @Override
    public ResponseEntity<List<OrderResponse>> getAllOrders(@ParameterObject Pageable pageable) {
        Page<OrderResponse> orderPage = orderService.getAllOrders(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), orderPage);

        return ResponseEntity.ok()
                .headers(headers).body(orderPage.getContent());
    }

    @Override
    public ResponseEntity<List<OrderResponse>> getOrderByCustomerId(UUID id) {
        List<OrderResponse> result = orderService.getOrdersByCustomerId(id);
        return ResponseEntity.ok().body(result);
    }

    @Override
    public ResponseEntity<OrderResponse> updateOrder(UUID id, @RequestBody OrderRequest orderRequest) {
        OrderResponse result = orderService.updateOrder(id, orderRequest);
        return ResponseEntity.ok().body(result);
    }

    @Override
    public ResponseEntity<Void> deleteOrder(UUID id) {
        orderService.deleteOrder(id);
        return ResponseEntity.accepted().build();
    }

    @Override
    public ResponseEntity<List<OrderResponse>> findByFilters(@ModelAttribute OrderFilter filter) {
        return ResponseEntity.ok(orderService.);
    }
}
